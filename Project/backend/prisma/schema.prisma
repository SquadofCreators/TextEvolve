// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum for status tracking
enum Status {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  UPLOADED
  NEW
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  email             String    @unique
  password          String?
  name              String?
  profilePictureUrl String?
  bio               String?
  position          String?
  company           String?
  location          String?
  otp               String?
  otpExpires        DateTime?
  isVerified        Boolean   @default(false)
  lastLoginAt       DateTime?
  lastLoginIp       String?
  lastLoginDevice   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  batches Batch[]

  @@map("users")
}

model Batch {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  totalFileSize       BigInt  @default(0)
  totalFileCount      Int     @default(0)
  status              Status  @default(NEW)
  extractedContent    String?
  accuracy            Float?
  precision           Float?
  loss                Float?
  totalWordCount      Int?
  totalCharacterCount Int?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String     @db.ObjectId
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents Document[]

  @@map("batches")
}

model Document {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  fileName         String
  fileSize         BigInt
  mimeType         String?
  storageKey       String
  status           Status  @default(UPLOADED)
  extractedContent String?
  accuracy         Float?
  precision        Float?
  loss             Float?
  wordCount        Int?
  characterCount   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  batchId   String   @db.ObjectId
  batch     Batch    @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@map("documents")
}
