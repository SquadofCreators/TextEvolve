// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum for status tracking
enum Status {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  UPLOADED // Specific for documents initially
  NEW      // Specific for batches initially
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  email           String    @unique
  password        String?
  name            String?
  profilePictureUrl String?   // Relative path
  // --- ADD THESE FIELDS ---
  bio             String?   // Optional String for Biography
  position        String?   // Optional String for Job Position
  company         String?   // Optional String for Company Name
  location        String?   // Optional String for Location
  // ------------------------
  otp             String?
  otpExpires      DateTime?
  isVerified      Boolean   @default(false)
  lastLoginAt     DateTime?
  lastLoginIp     String?
  lastLoginDevice String?

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  batches         Batch[]

  @@map("users")
}

model Batch {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  totalFileSize   BigInt    @default(0) // Use BigInt for potentially large sizes in bytes
  totalFileCount  Int       @default(0)
  status          Status    @default(NEW) // Track batch processing status
  extractedContent String?  // Aggregated content for the whole batch
  accuracy        Float?    // Overall batch accuracy
  precision       Float?    // Overall batch precision
  loss            Float?    // Overall batch loss

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relation to the user who created the batch
  userId          String    @db.ObjectId
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade delete batches if user is deleted

  // Relation to the documents within the batch
  documents       Document[]

  @@map("batches") // Explicitly map to collection name "batches"
}

model Document {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  fileName        String
  fileSize        BigInt    // Size in bytes
  mimeType        String?   // e.g., 'image/jpeg', 'application/pdf'
  storageKey      String    // Key or URL path to the file in storage (e.g., S3 key)
  status          Status    @default(UPLOADED) // Track document processing status
  extractedContent String?  // Extracted text for this specific document
  accuracy        Float?    // Accuracy for this document
  precision       Float?    // Precision for this document
  loss            Float?    // Loss for this document

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relation to the batch it belongs to
  batchId         String    @db.ObjectId
  batch           Batch     @relation(fields: [batchId], references: [id], onDelete: Cascade) // Cascade delete documents if batch is deleted

  @@map("documents") // Explicitly map to collection name "documents"
}