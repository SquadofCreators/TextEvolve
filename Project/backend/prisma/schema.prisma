// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum for status tracking
enum Status {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  UPLOADED
  NEW
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  email             String    @unique
  password          String?   // Hashed password
  name              String    // Mandatory - GOOD!
  profilePictureUrl String?   // Relative path
  bio               String?
  position          String?   // Optional - GOOD!
  company           String?   // Optional - GOOD!
  location          String?   // Optional - GOOD!
  otp               String?   // For signup AND password reset
  otpExpires        DateTime? // For signup AND password reset
  isVerified        Boolean   @default(false)
  lastLoginAt       DateTime?
  lastLoginIp       String?
  lastLoginDevice   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  batches Batch[]

  // --- ADD THESE INDEXES ---
  @@index([name])
  @@index([company])
  @@index([location])
  @@index([position])
  // -------------------------

  @@map("users")
}

// --- Batch and Document models remain the same ---

model Batch {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  totalFileSize       BigInt    @default(0)
  totalFileCount      Int       @default(0)
  status              Status    @default(NEW)
  extractedContent    String?
  accuracy            Float?
  precision           Float?
  loss                Float?
  totalWordCount      Int?
  totalCharacterCount Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents Document[]

  @@map("batches")
}

model Document {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  fileName           String
  fileSize           BigInt
  mimeType           String?
  storageKey         String    // Path/URL to original image
  status             Status @default(UPLOADED)
  extractedContent   String?
  accuracy           Float?
  precision          Float?
  loss               Float?
  wordCount          Int?
  characterCount     Int?
  enhancedText       String?
  translatedText     String?
  // --- ADD THIS NEW FIELD ---
  enhancedStorageKey String? // Path/URL to the enhanced image from another API

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  batchId   String   @db.ObjectId
  batch     Batch    @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@map("documents")
}